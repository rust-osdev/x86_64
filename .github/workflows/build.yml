name: Build

on:
  push:
    branches:
      - 'master'
    tags:
      - '*'
  schedule:
    - cron: '40 4 * * *'   # every day at 4:40
  pull_request:

jobs:
  test:
    name: "Test"

    strategy:
      fail-fast: false
      matrix:
        platform: [
          ubuntu-latest,
          macos-latest,
          windows-latest
        ]

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 15

    steps:
    - name: "Checkout Repository"
      uses: actions/checkout@v1

    - name: Install Rustup
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain nightly
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      if: runner.os == 'macOS'

    - name: Set Rustup profile to minimal
      run: rustup set profile minimal

    - name: Install musl target on Linux
      run: |
        rustup target add x86_64-unknown-linux-musl
        sudo apt-get install musl-tools musl-dev
      if: runner.os == 'Linux'

    - name: "Print Rust Version"
      run: |
        rustc -Vv
        cargo -Vv

    - name: Cache binaries
      id: cache-bin
      uses: actions/cache@v1
      with:
        path: binaries
        key: ${{ runner.OS }}-binaries
    - name: Add binaries/bin to PATH
      run: echo "$GITHUB_WORKSPACE/binaries/bin" >> $GITHUB_PATH
      shell: bash

    - name: "Run cargo build"
      uses: actions-rs/cargo@v1
      with:
        command: build

    - name: "Run cargo doc"
      uses: actions-rs/cargo@v1
      with:
        command: doc

    - name: "Run cargo doc for stable"
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: --no-default-features --features external_asm,instructions
      if: runner.os != 'Windows'

    - name: "Run cargo build for stable without instructions"
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --no-default-features

    - name: "Run cargo build for stable"
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --no-default-features --features external_asm,instructions
      if: runner.os != 'Windows'

    - name: "Run cargo build for stable on musl"
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --target x86_64-unknown-linux-musl --no-default-features --features external_asm,instructions
      if: runner.os == 'Linux'

    - name: "Run cargo test"
      uses: actions-rs/cargo@v1
      with:
        command: test

    - name: "Run cargo test for stable"
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-default-features --features external_asm,instructions
      if: runner.os != 'Windows'

    - name: "Run cargo test for stable on musl"
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --target x86_64-unknown-linux-musl --no-default-features --features external_asm,instructions
      if: runner.os == 'Linux'

    - name: "Install Rustup Targets"
      run: |
        rustup target add i686-unknown-linux-gnu
        rustup target add thumbv7em-none-eabihf
    - name: 'Build on non x86_64 platforms'
      run: |
        cargo build --target i686-unknown-linux-gnu --no-default-features --features nightly
        cargo build --target thumbv7em-none-eabihf --no-default-features --features nightly

    - name: "Install Rustup Components"
      run: rustup component add rust-src llvm-tools-preview
    - name: "Install cargo-xbuild"
      run: cargo install cargo-xbuild --debug --root binaries
    - name: "Install bootimage"
      run: cargo install bootimage --debug --root binaries

     # install QEMU
    - name: Install QEMU (Linux)
      run: |
        sudo apt update
        sudo apt install qemu-system-x86
      if: runner.os == 'Linux'
    - name: Install QEMU (macOS)
      run: brew install qemu
      if: runner.os == 'macOS'
      env:
        HOMEBREW_NO_AUTO_UPDATE: 1
        HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: 1
        HOMEBREW_NO_INSTALL_CLEANUP: 1
    - name: Install QEMU (Windows)
      run: |
        choco install qemu --version 2021.5.5
        echo "$Env:Programfiles\qemu" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      if: runner.os == 'Windows'
      shell: pwsh

    - name: "Print QEMU Version"
      run: qemu-system-x86_64 --version

    - name: "Run Test Framework"
      run: cargo xtest
      working-directory: 'testing'

  check_formatting:
    name: "Check Formatting"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
    - uses: actions/checkout@v1
    - run: rustup toolchain install nightly --profile minimal --component rustfmt
    - run: cargo +nightly fmt -- --check

  clippy:
    name: "Clippy"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v1
    - run: rustup toolchain install nightly --profile minimal --component clippy
    - name: "Run `cargo clippy`"
      uses: actions-rs/cargo@v1
      with:
        command: clippy
